# üê≥ Docker Compose ÏÑ§Ï†ï
# Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú Ïó¨Îü¨ ÏÑúÎπÑÏä§Î•º Ìï®Íªò Ïã§ÌñâÌïòÍ∏∞ ÏúÑÌïú ÏÑ§Ï†ï

version: '3.8'

services:
  # Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${DOCKER_IMAGE_NAME:-github-actions-demo}:${DOCKER_TAG:-latest}
    container_name: ${PROJECT_NAME:-github-actions-demo}-app
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ (Í∞úÎ∞úÏö©)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-github_actions_demo}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Redis (Ï∫êÏãúÏö©)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Î™®ÎãàÌÑ∞ÎßÅ (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped

  # Î™®ÎãàÌÑ∞ÎßÅ (Grafana)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
