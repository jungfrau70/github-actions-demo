name: Day3 - Production Level Operations

on:
  push:
    branches: [ day3-production ]
  pull_request:
    branches: [ day3-production ]
  schedule:
    - cron: '0 2 * * *'  # 매일 새벽 2시에 실행

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate
        npm audit --json > npm-audit-results.json
        
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: npm-audit-results.json

  test-comprehensive:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run load tests
      run: |
        npm install -g artillery
        artillery run tests/load/load-test.yml
        
    - name: Run performance tests
      run: |
        npm run test:performance
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build-production:
    needs: [security-scan, test-comprehensive]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
        region: [us-west-2, us-east-1, eu-west-1]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.multistage
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/github-actions-demo:day3-${{ matrix.environment }}-${{ matrix.region }}-${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/github-actions-demo:day3-${{ matrix.environment }}-${{ matrix.region }}-latest
        build-args: |
          NODE_ENV=${{ matrix.environment }}
          REGION=${{ matrix.region }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-aws-production:
    needs: build-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/day3-production'
    environment: production-aws
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Deploy to AWS ECS with Blue-Green
      run: |
        echo "Deploying to AWS ECS with Blue-Green deployment..."
        # ECS Blue-Green 배포 로직
        aws ecs update-service --cluster production-cluster --service github-actions-demo --deployment-configuration maximumPercent=200,minimumHealthyPercent=50 --force-new-deployment
        
    - name: Update Application Load Balancer
      run: |
        echo "Updating ALB target groups..."
        # ALB 타겟 그룹 업데이트 로직
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 스모크 테스트 실행
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Rolling back deployment..."
        # 롤백 로직

  deploy-gcp-production:
    needs: build-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/day3-production'
    environment: production-gcp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup GCP credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Deploy to GCP Cloud Run
      run: |
        echo "Deploying to GCP Cloud Run with traffic splitting..."
        # Cloud Run 트래픽 분할 배포
        gcloud run deploy github-actions-demo --image ${{ secrets.DOCKER_USERNAME }}/github-actions-demo:day3-production-us-west-2-latest --region us-central1 --platform managed --allow-unauthenticated --port 3000 --memory 1Gi --cpu 1 --max-instances 10 --min-instances 1
        
    - name: Configure Cloud Load Balancing
      run: |
        echo "Configuring Cloud Load Balancing..."
        # Cloud Load Balancer 설정
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 스모크 테스트 실행

  monitoring-setup:
    needs: [deploy-aws-production, deploy-gcp-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup monitoring stack
      run: |
        echo "Setting up comprehensive monitoring..."
        # Prometheus, Grafana, Jaeger, ELK 스택 설정
        
    - name: Configure alerting rules
      run: |
        echo "Configuring alerting rules..."
        # 알림 규칙 설정
        
    - name: Setup log aggregation
      run: |
        echo "Setting up log aggregation..."
        # 로그 수집 및 분석 설정

  cost-optimization:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Analyze AWS costs
      run: |
        echo "Analyzing AWS costs..."
        # AWS 비용 분석
        
    - name: Analyze GCP costs
      run: |
        echo "Analyzing GCP costs..."
        # GCP 비용 분석
        
    - name: Generate cost report
      run: |
        echo "Generating cost optimization report..."
        # 비용 최적화 보고서 생성

  performance-testing:
    needs: [deploy-aws-production, deploy-gcp-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/day3-production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load testing
      run: |
        echo "Running comprehensive load testing..."
        # 부하 테스트 실행
        
    - name: Run stress testing
      run: |
        echo "Running stress testing..."
        # 스트레스 테스트 실행
        
    - name: Run chaos engineering tests
      run: |
        echo "Running chaos engineering tests..."
        # 카오스 엔지니어링 테스트 실행