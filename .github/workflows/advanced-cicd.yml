# 🚀 Day2: 고급 CI/CD 파이프라인
# Day1의 기본 CI/CD를 고급 다중 환경 배포로 발전

name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경을 선택하세요'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: github-actions-demo

jobs:
  # 코드 품질 검사
  quality-check:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 린팅 검사
      run: npm run lint
      
    - name: 보안 감사
      run: npm audit --audit-level moderate
      
    - name: 코드 커버리지
      run: npm run test:coverage
      
    - name: 코드 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # 멀티 환경 테스트
  test:
    name: 멀티 환경 테스트
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        environment: [staging, production]
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js ${{ matrix.node-version }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: ${{ matrix.environment }} 환경 테스트
      run: |
        NODE_ENV=${{ matrix.environment }} npm test
        NODE_ENV=${{ matrix.environment }} npm run test:integration

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker Hub 로그인
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Docker 메타데이터 설정
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Docker 이미지 빌드 및 푸시
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 스테이징 환경 배포
  deploy-staging:
    name: 스테이징 환경 배포
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 스테이징 환경 배포
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_VM_HOST }}
        username: ${{ secrets.STAGING_VM_USERNAME }}
        key: ${{ secrets.STAGING_VM_SSH_KEY }}
        script: |
          # 환경 변수 설정
          export DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
          export REDIS_PASSWORD="${{ secrets.STAGING_REDIS_PASSWORD }}"
          
          # 기존 서비스 중지
          docker-compose -f docker-compose.prod.yml down
          
          # 최신 이미지 풀
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:develop
          
          # 스테이징 환경 배포
          docker-compose -f docker-compose.prod.yml up -d
          
          # 헬스체크
          sleep 30
          curl -f http://localhost/health || exit 1
          
          echo "✅ 스테이징 환경 배포 완료!"

  # 프로덕션 환경 배포
  deploy-production:
    name: 프로덕션 환경 배포
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 프로덕션 환경 배포
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_VM_HOST }}
        username: ${{ secrets.PROD_VM_USERNAME }}
        key: ${{ secrets.PROD_VM_SSH_KEY }}
        script: |
          # 환경 변수 설정
          export DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
          export REDIS_PASSWORD="${{ secrets.PROD_REDIS_PASSWORD }}"
          
          # Blue-Green 배포를 위한 백업
          docker-compose -f docker-compose.prod.yml down
          docker tag ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
          
          # 최신 이미지 풀
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # 프로덕션 환경 배포
          docker-compose -f docker-compose.prod.yml up -d
          
          # 헬스체크
          sleep 30
          curl -f http://localhost/health || exit 1
          
          echo "✅ 프로덕션 환경 배포 완료!"

  # 배포 후 검증
  post-deployment:
    name: 배포 후 검증
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
    - name: 배포 상태 확인
      run: |
        echo "🔍 배포 후 검증을 시작합니다..."
        # 실제 환경에서는 모니터링 도구를 사용하여 상태 확인
        
    - name: 성능 테스트
      run: |
        echo "⚡ 성능 테스트를 실행합니다..."
        # 실제 환경에서는 성능 테스트 도구 사용
        
    - name: 보안 스캔
      run: |
        echo "🔒 보안 스캔을 실행합니다..."
        # 실제 환경에서는 보안 스캔 도구 사용

  # 알림 발송
  notify:
    name: 알림 발송
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment]
    if: always()
    steps:
    - name: Slack 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
