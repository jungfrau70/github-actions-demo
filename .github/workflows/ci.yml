# 🔄 CI 워크플로우 (Continuous Integration)
# 코드가 푸시될 때마다 자동으로 테스트하고 빌드합니다

name: CI Pipeline

# 언제 실행할지 정의
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

# 병렬로 실행할 수 있는 작업들
jobs:
  # 1. 코드 품질 검사
  code-quality:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 의존성 설치
      run: npm install
      
    - name: 코드 린팅
      run: npm run lint
      
    - name: 코드 포맷팅 검사
      run: npm run format:check

  # 2. 테스트 실행
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 의존성 설치
      run: npm install
      
    - name: 단위 테스트 실행
      run: npm run test:unit
      
    - name: 통합 테스트 실행
      run: npm run test:integration
      
    - name: 테스트 커버리지 생성
      run: npm run test:coverage
      
    - name: 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # 3. 보안 스캔
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 의존성 설치
      run: npm install
      
    - name: 보안 취약점 스캔
      run: npm audit --audit-level moderate
      
    - name: 의존성 라이선스 검사
      run: npm run license:check

  # 4. Docker 이미지 빌드
  docker-build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker 빌드
      run: |
        docker build -f Dockerfile -t github-actions-demo:latest .
        docker build -f Dockerfile.dev -t github-actions-demo:dev .
        docker build -f Dockerfile.test -t github-actions-demo:test .
        
    - name: 이미지 크기 확인
      run: |
        docker images github-actions-demo --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
    - name: 이미지 정보 확인
      run: |
        echo "✅ Docker 이미지 빌드 완료"
        docker images github-actions-demo --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
