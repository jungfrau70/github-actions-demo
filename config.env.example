# GitHub Actions Demo 프로젝트 환경 설정
# 이 파일을 .env로 복사하여 사용하세요

# ===========================================
# 프로젝트 기본 설정
# ===========================================
PROJECT_NAME=github-actions-demo
PROJECT_VERSION=1.0.0
PROJECT_DESCRIPTION="GitHub Actions CI/CD 실습 프로젝트"

# ===========================================
# Docker 설정
# ===========================================
DOCKER_USERNAME=your_dockerhub_username
DOCKER_IMAGE_NAME=github-actions-demo
DOCKER_TAG=latest

# Docker Hub Personal Access Token (Docker Hub에 이미지 푸시용)
DOCKER_PASSWORD=your_dockerhub_pat

# ===========================================
# GitHub 설정
# ===========================================
GITHUB_USERNAME=your_github_username
GITHUB_REPO_NAME=github-actions-demo
GITHUB_ORG_NAME=your_github_org

# GitHub Personal Access Token (GitHub Actions용)
GITHUB_TOKEN=your_github_pat

# ===========================================
# 애플리케이션 설정
# ===========================================
APP_PORT=3000
APP_HOST=localhost
NODE_ENV=development

# ===========================================
# 데이터베이스 설정 (예시)
# ===========================================
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=your_db_password
DB_NAME=github_actions_demo

# ===========================================
# 모니터링 설정
# ===========================================
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001
GRAFANA_USER=admin
GRAFANA_PASSWORD=admin

# ===========================================
# 배포 설정
# ===========================================
# VM 접속 정보 (Day 1)
# AWS EC2
AWS_VM_NAME=your-ec2-instance-name
AWS_VM_INSTANCE_ID=i-1234567890abcdef0
AWS_VM_HOST=your-ec2-ip
AWS_VM_USERNAME=ubuntu
AWS_VM_SSH_KEY=~/.ssh/aws-key.pem

# GCP Compute Engine
GCP_VM_NAME=your-compute-instance-name
GCP_VM_INSTANCE_NAME=your-compute-instance-name
GCP_VM_ZONE=us-central1-a
GCP_VM_HOST=your-compute-engine-ip
GCP_VM_USERNAME=ubuntu
GCP_VM_SSH_KEY=~/.ssh/gcp-key

# Azure VM
AZURE_VM_NAME=your-azure-vm-name
AZURE_VM_RESOURCE_GROUP=your-resource-group
AZURE_VM_HOST=your-azure-vm-ip
AZURE_VM_USERNAME=azureuser
AZURE_VM_SSH_KEY=~/.ssh/azure-key

# Kubernetes 클러스터 정보 (Day 2)
# AWS EKS
AWS_EKS_CLUSTER_NAME=your-eks-cluster-name
AWS_EKS_NODE_GROUP=your-node-group-name
AWS_EKS_VPC_ID=vpc-12345678
AWS_EKS_NAMESPACE=github-actions-demo
AWS_EKS_INGRESS_HOST=your-eks-ingress-host

# GCP GKE
GCP_GKE_CLUSTER_NAME=your-gke-cluster-name
GCP_GKE_NODE_POOL=your-node-pool-name
GCP_GKE_NAMESPACE=github-actions-demo
GCP_GKE_INGRESS_HOST=your-gke-ingress-host

# Azure AKS
AZURE_AKS_CLUSTER_NAME=your-aks-cluster-name
AZURE_AKS_NODE_POOL=your-node-pool-name
AZURE_AKS_NAMESPACE=github-actions-demo
AZURE_AKS_INGRESS_HOST=your-aks-ingress-host
AZURE_SUBSCRIPTION_ID=your-subscription-id

# ===========================================
# AWS 설정 (예시)
# ===========================================
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key

# ===========================================
# GCP 설정 (예시)
# ===========================================
GCP_PROJECT_ID=your_gcp_project_id
GCP_SERVICE_ACCOUNT_KEY=your_gcp_service_account_key_base64

# ===========================================
# 개발 도구 설정
# ===========================================
# ESLint 설정
ESLINT_CONFIG=.eslintrc.js

# Prettier 설정
PRETTIER_CONFIG=.prettierrc

# Jest 설정
JEST_CONFIG=jest.config.js

# ===========================================
# CI/CD 설정
# ===========================================
# GitHub Actions 워크플로우 파일 경로
CI_WORKFLOW_PATH=.github/workflows
DOCKER_WORKFLOW_FILE=docker-build.yml
DEPLOY_WORKFLOW_FILE=deploy-vm.yml

# ===========================================
# 보안 설정
# ===========================================
# JWT Secret (애플리케이션 인증용)
JWT_SECRET=your_jwt_secret_key_here

# API Key (외부 API 연동용)
API_KEY=your_api_key_here

# ===========================================
# 로그 설정
# ===========================================
LOG_LEVEL=info
LOG_FILE=logs/app.log
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5

# ===========================================
# 성능 설정
# ===========================================
# Node.js 메모리 제한
NODE_OPTIONS=--max-old-space-size=4096

# Docker 메모리 제한
DOCKER_MEMORY_LIMIT=1g

# ===========================================
# 알림 설정
# ===========================================
# Slack 웹훅 (배포 알림용)
SLACK_WEBHOOK_URL=your_slack_webhook_url

# 이메일 설정 (알림용)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_email_password

# ===========================================
# 테스트 설정
# ===========================================
# 테스트 데이터베이스
TEST_DB_HOST=localhost
TEST_DB_PORT=5432
TEST_DB_USER=test_user
TEST_DB_PASSWORD=test_password
TEST_DB_NAME=github_actions_demo_test

# 테스트 포트
TEST_PORT=3001
